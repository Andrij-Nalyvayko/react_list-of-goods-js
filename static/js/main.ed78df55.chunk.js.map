{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_DEFAULT","SORT_FIELD_LENGTH","SORT_FIELD_ABC","App","useState","sortType","reverse","listObserver","setListObserver","preparedGoods","goods","result","sort","good1","good2","localeCompare","length","getPreparedGoods","handleSort","prevState","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"wPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAqB,UACrBC,EAAoB,SACpBC,EAAiB,iBAyBhB,IAAMC,EAAM,WACjB,MAAwCC,mBAAS,CAC/CC,SAAUL,EACVM,SAAS,IAFX,mBAAOC,EAAP,KAAqBC,EAArB,KAKMC,EA7BR,SAA0BC,EAAOL,EAAUC,GACzC,IAAIK,EAAM,YAAOD,GAmBjB,OAjBAC,EAAOC,MAAK,SAACC,EAAOC,GAClB,QAAQ,GACN,KAAKT,IAAaH,EAChB,OAAOW,EAAME,cAAcD,GAE7B,KAAKT,IAAaJ,EAChB,OAAOY,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAITV,IACFK,EAASA,EAAOL,WAGXK,EASeM,CACpBlB,EACAQ,EAAaF,SACbE,EAAaD,SAGTY,EAAa,SAACb,GAClBG,GAAgB,SAAAW,GAAS,kCACpBA,GADoB,IAEvBd,iBAiBJ,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYf,EAAaF,WAAaH,IAE1CqB,QAAS,kBAAML,EAAWhB,IAN5B,iCAWA,wBACEmB,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYf,EAAaF,WAAaJ,IAE1CsB,QAAS,kBAAML,EAAWjB,IAN5B,4BAWA,wBACEoB,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAaf,EAAaD,UAE9BiB,QA5Cc,WACpBf,GAAgB,SAAAW,GAAS,kCAClBA,GADkB,IACPb,SAAUa,EAAUb,cAoClC,sBAWEC,EAAaF,WAAaL,GACvBO,EAAaD,UAChB,wBACEe,KAAK,SACLD,UAAU,4BACVG,QAhDU,WAClBf,EAAgB,CACdH,SAAUL,EACVM,SAAS,KA0CL,sBAUJ,6BACGG,EAAce,KAAI,SAAAC,GAAI,OACrB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YC5HnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ed78df55.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_DEFAULT = 'default';\nconst SORT_FIELD_LENGTH = 'length';\nconst SORT_FIELD_ABC = 'alphabetically';\n\nfunction getPreparedGoods(goods, sortType, reverse) {\n  let result = [...goods];\n\n  result.sort((good1, good2) => {\n    switch (true) {\n      case sortType === SORT_FIELD_ABC:\n        return good1.localeCompare(good2);\n\n      case sortType === SORT_FIELD_LENGTH:\n        return good1.length - good2.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (reverse) {\n    result = result.reverse();\n  }\n\n  return result;\n}\n\nexport const App = () => {\n  const [listObserver, setListObserver] = useState({\n    sortType: SORT_FIELD_DEFAULT,\n    reverse: false,\n  });\n\n  const preparedGoods = getPreparedGoods(\n    goodsFromServer,\n    listObserver.sortType,\n    listObserver.reverse,\n  );\n\n  const handleSort = (sortType) => {\n    setListObserver(prevState => ({\n      ...prevState,\n      sortType,\n    }));\n  };\n\n  const handleReverse = () => {\n    setListObserver(prevState => (\n      { ...prevState, reverse: !prevState.reverse }\n    ));\n  };\n\n  const handleReset = () => {\n    setListObserver({\n      sortType: SORT_FIELD_DEFAULT,\n      reverse: false,\n    });\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            { 'is-light': listObserver.sortType !== SORT_FIELD_ABC },\n          )}\n          onClick={() => handleSort(SORT_FIELD_ABC)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            { 'is-light': listObserver.sortType !== SORT_FIELD_LENGTH },\n          )}\n          onClick={() => handleSort(SORT_FIELD_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            { 'is-light': !listObserver.reverse },\n          )}\n          onClick={handleReverse}\n        >\n          Reverse\n        </button>\n\n        {(listObserver.sortType !== SORT_FIELD_DEFAULT\n          || listObserver.reverse) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {preparedGoods.map(good => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}